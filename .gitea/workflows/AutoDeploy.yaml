name: Java后端自动化部署

# 指定在哪个分支，以及什么操作触发
on:
  # 在对 master 分支实施 pull_request（Merge 其他分支到 prod）时触发
  pull_request:
    branches: [ "prod" ]
# 具体任务配置
jobs:
  build:
    # 指定运行环境
    runs-on: ubuntu-latest
    # 具体的步骤
    steps:
      # checkout 代码到 Github Actions 运行容器中
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          ref: prod
        # 向容器安装 Java 21，为 SpringBoot 提供运行环境
      - name: 安装JDK17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
#        # 获取 relase 分支，用于打包
#      - name: 获取分支名
#        id: get_branch_name
#        run: echo "::set-output name=branch_name::$(echo $line | grep 'SNAPSHOT' pom.xml | awk '{split($0,a,"-"); print a[1]}'| awk '{split($0,a,">"); print a[2]}')"
      - name: 安装curl
        run: apt-get update && apt-get install build-essential curl pkg-config openssl -y
      - name: 安装maven
        run: |
          curl -sL https://downloads.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip -o maven.zip
          apt-get update
          apt-get -y install unzip
          unzip -d /usr/share maven.zip
          rm maven.zip
          ln -s /usr/share/apache-maven-3.9.6/bin/mvn /usr/bin/mvn
          echo "M2_HOME=/usr/share/apache-maven-3.9.6" | tee -a /etc/environment
        # 通过 maven 打包
      - name: 打包
        run: mvn -B package --file pom.xml
        # 把 jar 包上传到指定服务器，其中的 secrets.SERVER_IP，secrets.SERVER_PASSWORD 需要在该项目 Github 的 Setting 中配置
      - name: 上传到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.USER_PORT }}
          source: 'target/easy-mbp-enhance-1.0.0.jar'
          target: ${{ secrets.REMOTE_DIR }}
        # ssh 到指定服务器，执行部署命令，具体 deployment.sh 的代码可以去看我之前写的 docker 部署
      - name: 运行打包命令并部署
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: |
            cd ${{ secrets.REMOTE_DIR }}
            ./deploy.sh
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.USER_NAME }}
          port: ${{ secrets.USER_PORT }}
          privateKey: ${{ secrets.REMOTE_KEY }}
